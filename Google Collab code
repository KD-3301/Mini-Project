#gathering DATA

!pip install ipython-autotime
%load_ext autotime

!pip install bing-image-downloader

!mkdir images

from bing_image_downloader import downloader
downloader.download("soccer ball", limit=50, output_dir = 'images', adult_filter_off = True)

from bing_image_downloader import downloader
downloader.download("rugby ball", limit=50, output_dir = 'images', adult_filter_off = True)

from bing_image_downloader import downloader
downloader.download("basketball", limit=50, output_dir = 'images', adult_filter_off = True)

from bing_image_downloader import downloader
downloader.download("tennis ball", limit=50, output_dir = 'images', adult_filter_off = True)

from bing_image_downloader import downloader
downloader.download("tennis ball", limit=50, output_dir = 'images', adult_filter_off = True)

from bing_image_downloader import downloader
downloader.download("baseball ball", limit=50, output_dir = 'images', adult_filter_off = True)

from bing_image_downloader import downloader
downloader.download("volleyball ball", limit=50, output_dir = 'images', adult_filter_off = True)

from bing_image_downloader import downloader
downloader.download("bowling ball", limit=50, output_dir = 'images', adult_filter_off = True)

from bing_image_downloader import downloader
downloader.download("bowling ball", limit=50, output_dir = 'images', adult_filter_off = True)

from bing_image_downloader import downloader
downloader.download("golf ball", limit=50, output_dir = 'images', adult_filter_off = True)

from bing_image_downloader import downloader
downloader.download("beach ball", limit=50, output_dir = 'images', adult_filter_off = True)

from bing_image_downloader import downloader
downloader.download("pool ball", limit=50, output_dir = 'images', adult_filter_off = True)

from bing_image_downloader import downloader
downloader.download("cricket ball", limit=50, output_dir = 'images', adult_filter_off = True)

from bing_image_downloader import downloader
downloader.download("table tennis ball", limit=50, output_dir = 'images', adult_filter_off = True)

#preprocessing :

import os
import matplotlib.pyplot as plt
import numpy as np
from skimage.io import imread
from skimage.transform import resize

target = []
images = []
flat_data = []

DATADIR = '/content/images'
CATEGORIES = ['basketball','cricket ball','soccer ball','tennis ball','volleyball ball']

for category in CATEGORIES:
  class_num = CATEGORIES.index(category)
  path = os.path.join(DATADIR,category)
  print(path)
  for img in os.listdir(path):
    img_array = imread(os.path.join(path,img))
    #print(img_array.shape)
    #plt.imshow(img_array)
    img_resized = resize(img_array,(150,150,3))
    flat_data.append(img_resized.flatten())
    images.append(img_resized)
    target.append(class_num)

flat_data = np.array(flat_data)
target = np.array(target)
images = np.array(images)
    

flat_data[0]
len(flat_data[0])

target

unique,count = np.unique(target,return_counts = True)
plt.bar(CATEGORIES,count)

# spliting data into TRAINING and Testing
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(flat_data,target,test_size=0.3,random_state=169)

from sklearn.model_selection import GridSearchCV
from sklearn import svm
param_grid = [
              {'C':[1,10,100,1000],'kernel':['linear']},
              {'C':[1,10,100,1000],'gamma':[0.001,0.0001],'kernel':['rbf']},
]

svc = svm.SVC(probability = True)
clf = GridSearchCV(svc,param_grid)
clf.fit(x_train,y_train)

y_pred = clf.predict(x_test)
y_pred

y_test

from sklearn.metrics import accuracy_score, confusion_matrix

accuracy_score(y_pred,y_test)

confusion_matrix(y_pred,y_test)

# save the nodel using Pickle library
import pickle
pickle.dump(clf,open('img_model.p','wb'))

model = pickle.load(open('img_model.p','rb'))

# testing a the model -
flat_data = []
url = input('ENter image URL of any sport ball:  ')
img = imread(url)
img_resized = resize(img,(150,150,3))
flat_data.append(img_resized.flatten())
flat_data = np.array(flat_data)
print(img.shape)
plt.imshow(img_resized)
y_out = model.predict(flat_data)
y_out = CATEGORIES[y_out[0]]
print(f' PREDICTED OUTPUT:  {y_out}')

# Deployment of the MODEL
!pip install streamlit
!pip install pyngrok
from pyngrok import ngrok


#deploy
%%writefile app.py
import streamlit as st
import numpy as np
from skimage.io import imread
from skimage.transform import resize
import pickle
from PIL import Image

st.set_option('description.ShowfileUploaderEncoding',False)
st.title('Image Classifier')
st.text('Upload Image:')

uploaded_file = st.file_uploader ("choose an image:", type = "jpg", type = "jpeg", type = "png", type = "GIF")
model = pickle.load(open('img_model.p','rb') )
if uploaded_file is not None:
  img = Image.open(uploaded_file)
  st.image(img,caption = 'UploadedImage')
  
  if st.button('PREDICT'):
    CATEGORIES = ['basketball','cricket ball','soccer ball','tennis ball','volleyball ball']
    st.write('RESULT:')
    flat_data = []
    img_resized = resize(img,(150,150,3))
    flat_data.append(img_resized.flatten())
    flat_data = np.array(flat_data)
    y_out = model.predict(flat_data)
    y_out = CATEGORIES[y_out[0]]
    st.title(f' PREDICTED OUTPUT:  {y_out}')
    q = model.predict_proba(flat_data)
    for index, item in enumerate(CATEGORIES):
      st.write(f'{item} : {q[0][index]*100}%')

!nohup streamlit run app.py &

url = ngrok.connect(port='8501')
url
